// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides details about a Hetzner Cloud Floating IP.
//
// This resource can be useful when you need to determine a Floating IP ID based on the IP address.
//
// ## Example Usage
//
// # Data Source: FloatingIp
// Provides details about a Hetzner Cloud Floating IP.
// This resource can be useful when you need to determine a Floating IP ID based on the IP address.
// ### Additional Examples
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "1.2.3.4"
// 		ip1, err := hcloud.LookupFloatingIp(ctx, &hcloud.LookupFloatingIpArgs{
// 			IpAddress: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := "key=value"
// 		_, err = hcloud.LookupFloatingIp(ctx, &hcloud.LookupFloatingIpArgs{
// 			WithSelector: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		var main []*hcloud.FloatingIpAssignment
// 		for key0, _ := range _var.Counter {
// 			__res, err := hcloud.NewFloatingIpAssignment(ctx, fmt.Sprintf("main-%v", key0), &hcloud.FloatingIpAssignmentArgs{
// 				FloatingIpId: pulumi.Int(ip1.Id),
// 				ServerId:     pulumi.Any(hcloud_server.Main.Id),
// 			})
// 			if err != nil {
// 				return err
// 			}
// 			main = append(main, __res)
// 		}
// 		return nil
// 	})
// }
// ```
func LookupFloatingIp(ctx *pulumi.Context, args *LookupFloatingIpArgs, opts ...pulumi.InvokeOption) (*LookupFloatingIpResult, error) {
	var rv LookupFloatingIpResult
	err := ctx.Invoke("hcloud:index/getFloatingIp:getFloatingIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFloatingIp.
type LookupFloatingIpArgs struct {
	// (int) Unique ID of the Floating IP.
	Id *int `pulumi:"id"`
	// IP address of the Floating IP.
	IpAddress *string `pulumi:"ipAddress"`
	Name      *string `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector *string `pulumi:"selector"`
	// [Label selector](https://docs.hetzner.cloud/#overview-label-selector)
	WithSelector *string `pulumi:"withSelector"`
}

// A collection of values returned by getFloatingIp.
type LookupFloatingIpResult struct {
	Description  string `pulumi:"description"`
	HomeLocation string `pulumi:"homeLocation"`
	// (int) Unique ID of the Floating IP.
	Id *int `pulumi:"id"`
	// (string) IP address of the Floating IP.
	IpAddress string                 `pulumi:"ipAddress"`
	IpNetwork string                 `pulumi:"ipNetwork"`
	Labels    map[string]interface{} `pulumi:"labels"`
	Name      *string                `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector     *string `pulumi:"selector"`
	ServerId     int     `pulumi:"serverId"`
	Type         string  `pulumi:"type"`
	WithSelector *string `pulumi:"withSelector"`
}
