// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetFloatingIp
    {
        /// <summary>
        /// Provides details about a Hetzner Cloud Floating IP.
        /// 
        /// This resource can be useful when you need to determine a Floating IP ID based on the IP address.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// 
        /// # Data Source: hcloud.FloatingIp
        /// Provides details about a Hetzner Cloud Floating IP.
        /// This resource can be useful when you need to determine a Floating IP ID based on the IP address.
        /// 
        /// {{% example %}}
        /// ### Additional Examples
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ip1 = Output.Create(HCloud.GetFloatingIp.InvokeAsync(new HCloud.GetFloatingIpArgs
        ///         {
        ///             IpAddress = "1.2.3.4",
        ///         }));
        ///         var image2 = Output.Create(HCloud.GetFloatingIp.InvokeAsync(new HCloud.GetFloatingIpArgs
        ///         {
        ///             WithSelector = "key=value",
        ///         }));
        ///         var main = new List&lt;HCloud.FloatingIpAssignment&gt;();
        ///         for (var rangeIndex = 0; rangeIndex &lt; @var.Counter; rangeIndex++)
        ///         {
        ///             var range = new { Value = rangeIndex };
        ///             main.Add(new HCloud.FloatingIpAssignment($"main-{range.Value}", new HCloud.FloatingIpAssignmentArgs
        ///             {
        ///                 FloatingIpId = ip1.Apply(ip1 =&gt; ip1.Id),
        ///                 ServerId = hcloud_server.Main.Id,
        ///             }));
        ///         }
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFloatingIpResult> InvokeAsync(GetFloatingIpArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFloatingIpResult>("hcloud:index/getFloatingIp:getFloatingIp", args ?? new GetFloatingIpArgs(), options.WithVersion());
    }


    public sealed class GetFloatingIpArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// (int) Unique ID of the Floating IP.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// IP address of the Floating IP.
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("selector")]
        public string? Selector { get; set; }

        /// <summary>
        /// [Label selector](https://docs.hetzner.cloud/#overview-label-selector)
        /// </summary>
        [Input("withSelector")]
        public string? WithSelector { get; set; }

        public GetFloatingIpArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFloatingIpResult
    {
        public readonly string Description;
        public readonly string HomeLocation;
        /// <summary>
        /// (int) Unique ID of the Floating IP.
        /// </summary>
        public readonly int? Id;
        /// <summary>
        /// (string) IP address of the Floating IP.
        /// </summary>
        public readonly string IpAddress;
        public readonly string IpNetwork;
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string? Name;
        public readonly string? Selector;
        public readonly int ServerId;
        public readonly string Type;
        public readonly string? WithSelector;

        [OutputConstructor]
        private GetFloatingIpResult(
            string description,

            string homeLocation,

            int? id,

            string ipAddress,

            string ipNetwork,

            ImmutableDictionary<string, object> labels,

            string? name,

            string? selector,

            int serverId,

            string type,

            string? withSelector)
        {
            Description = description;
            HomeLocation = homeLocation;
            Id = id;
            IpAddress = ipAddress;
            IpNetwork = ipNetwork;
            Labels = labels;
            Name = name;
            Selector = selector;
            ServerId = serverId;
            Type = type;
            WithSelector = withSelector;
        }
    }
}
