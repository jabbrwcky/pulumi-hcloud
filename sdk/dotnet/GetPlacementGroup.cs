// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetPlacementGroup
    {
        public static Task<GetPlacementGroupResult> InvokeAsync(GetPlacementGroupArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPlacementGroupResult>("hcloud:index/getPlacementGroup:getPlacementGroup", args ?? new GetPlacementGroupArgs(), options.WithVersion());
    }


    public sealed class GetPlacementGroupArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public int? Id { get; set; }

        [Input("labels")]
        private Dictionary<string, object>? _labels;
        public Dictionary<string, object> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, object>());
            set => _labels = value;
        }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("withSelector")]
        public string? WithSelector { get; set; }

        public GetPlacementGroupArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPlacementGroupResult
    {
        public readonly int? Id;
        public readonly ImmutableDictionary<string, object>? Labels;
        public readonly bool? MostRecent;
        public readonly string Name;
        public readonly ImmutableArray<int> Servers;
        public readonly string? Type;
        public readonly string? WithSelector;

        [OutputConstructor]
        private GetPlacementGroupResult(
            int? id,

            ImmutableDictionary<string, object>? labels,

            bool? mostRecent,

            string name,

            ImmutableArray<int> servers,

            string? type,

            string? withSelector)
        {
            Id = id;
            Labels = labels;
            MostRecent = mostRecent;
            Name = name;
            Servers = servers;
            Type = type;
            WithSelector = withSelector;
        }
    }
}
